/**
 * g++ -o local_static local_static.cpp
 * 静态局部变量
 * 在函数声明变量时，static关键字指定变量只会初始化一次，并且在只会调用该函数时保留其状态
 * static修饰局部变量时，会改变局部变量的存储位置，不在在栈区，而是在静态数据区（存放全局变量和静态变量）
 * 从而使局部变量的生命周期变长，即使出了函数体也不会马上回收
 * 需要注意的是，static的修饰不会改变作用域
 * static 关键字 没有赋值时，默认赋值为 0 
 * 
 * static的另一个作用是默认初始化为0。其实全局变量也具备这一属性，因为全局变量也存储在静态数据区。
 * 在静态数据区，内存中所有的字节默认值都是0x00，某些时候这一特点可以减少程序员的工作量。
 * 比如初始化一个稀疏矩阵，我们可以一个一个地把所有元素都置0，然后把不是0的几个元素赋值。
 * 如果定义成静态的，就省去了一开始置0的操作。再比如要把一个字符数组当字符串来用，但又觉得每次在字符数组末尾加‘\0’;太麻烦。
 * 如果把字符串定义成静态的，就省去了这个麻烦，因为那里本来就是 ‘\0’。
*/

#include <iostream>
using namespace std;

void test()
{
    int x = 0;
    x++;
    cout << "normal x = " << x << endl;
}

void test_static()
{
    static int x = 0;
    x++;
    cout << "static x ======== " << x << endl;

}

int main()
{
    for (int i = 0; i < 10; i++)
    {
        test();
        test_static();
    }
    
    return 0;
}